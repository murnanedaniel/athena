/*
  Copyright (C) 2002-2018 CERN for the benefit of the ATLAS collaboration
*/

/// @author Nils Krumnack


//
// includes
//

#include <AsgMessaging/MessageCheck.h>
#include <SystematicsHandles/CopyHelpers.h>

//
// method implementations
//

namespace CP
{
  template<typename T> template<typename T2> SysCopyHandle<T> ::
  SysCopyHandle (T2 *owner, const std::string& propertyName,
                 const std::string& propertyValue,
                 const std::string& propertyDescription)
    : AsgMessagingForward (owner), m_inputName (propertyValue)
    , m_evtStoreGetter ([owner] () {return &*owner->evtStore();})
  {
    owner->declareProperty (propertyName, m_inputName, propertyDescription);
    owner->declareProperty (propertyName + "Out", m_outputName, "the (optional) name of the copy we create of " + propertyName);
  }

  template<typename T> template<typename T2> SysCopyHandle<T> ::
  SysCopyHandle (const std::string &inputName, const std::string &outputName, T2 *owner)
    : AsgMessagingForward (owner), m_inputName(inputName), m_outputName(outputName)
    , m_evtStoreGetter ([owner] () {return &*owner->evtStore();})
  {}



  template<typename T> bool SysCopyHandle<T> ::
  empty () const noexcept
  {
    return m_inputName.empty();
  }



  template<typename T> SysCopyHandle<T> ::
  operator bool () const noexcept
  {
    return !m_inputName.empty();
  }



  template<typename T> std::string SysCopyHandle<T> ::
  getNamePattern () const
  {
    if (!m_outputName.empty())
      return m_outputName;
    else
      return m_inputName;
  }



  template<typename T> StatusCode SysCopyHandle<T> ::
  initialize (SysListHandle& sysListHandle)
  {
    if (!m_outputName.empty())
      ANA_CHECK (sysListHandle.service().registerCopy (m_inputName, m_outputName));
    return sysListHandle.addHandle (*this);
  }



  template<typename T> StatusCode SysCopyHandle<T> ::
  initialize (SysListHandle& sysListHandle, SG::AllowEmptyEnum)
  {
    if (!empty())
      return initialize (sysListHandle);
    else
      return StatusCode::SUCCESS;
  }



  template<typename T> ::StatusCode SysCopyHandle<T> ::
  getCopy (T*& object, const CP::SystematicSet& sys) const
  {
    auto cache = m_nameCache.find (sys);
    if (cache == m_nameCache.end())
    {
      if (m_nameCache.empty())
        throw std::logic_error ("uninitialized SysCopyHandle (" + m_inputName + ")");
      else
        throw std::logic_error ("unsupported systematic in SysCopyHandle (" + m_inputName + "): (" + sys.name() + ")");
    }
    assert (m_evtStore);
    if (std::get<1>(cache->second).empty())
    {
      // if no output name is configured, act like an update handle
      return m_evtStore->retrieve (object, std::get<0>(cache->second));
    } else
    {
      // if an output name is configured, retrieve the input object as
      // a const object, (shallow) copy it, record the copy and return
      // it.

      const T *inputObject = nullptr;
      if (m_evtStore->retrieve (inputObject, std::get<0>(cache->second)).isFailure())
        return StatusCode::FAILURE;

      return detail::ShallowCopy<T>::getCopy
        (msg(), *m_evtStore, object, inputObject,
         std::get<1>(cache->second), std::get<2>(cache->second));
    }
  }

  template<typename T> ::StatusCode SysCopyHandle<T> ::
  getCopy (const T*& object, const CP::SystematicSet& sys) const
  {
    auto cache = m_nameCache.find (sys);
    if (cache == m_nameCache.end())
    {
      if (m_nameCache.empty())
        throw std::logic_error ("uninitialized SysCopyHandle (" + m_inputName + ")");
      else
        throw std::logic_error ("unsupported systematic in SysCopyHandle (" + m_inputName + "): (" + sys.name() + ")");
    }
    assert (m_evtStore);
    if (std::get<1>(cache->second).empty())
    {
      // if no output name is configured, act like an update handle
      return m_evtStore->retrieve (object, std::get<0>(cache->second));
    } else
    {
      // if an output name is configured, retrieve the input object as
      // a const object, (shallow) copy it, record the copy and return
      // it.

      const T *inputObject = nullptr;
      if (m_evtStore->retrieve (inputObject, std::get<0>(cache->second)).isFailure())
        return StatusCode::FAILURE;

      T *tmpObject = nullptr;

      if (detail::ShallowCopy<T>::getCopy
        (msg(), *m_evtStore, tmpObject, inputObject,
         std::get<1>(cache->second), std::get<2>(cache->second)).isFailure())
        return StatusCode::FAILURE;
      object = tmpObject;
      return StatusCode::SUCCESS;
    }
  }



  template<typename T> CP::SystematicSet SysCopyHandle<T> ::
  getInputAffecting (const ISystematicsSvc& svc) const
  {
    return svc.getObjectSystematics (m_inputName);
  }



  template<typename T> StatusCode SysCopyHandle<T> ::
  fillSystematics (const ISystematicsSvc& svc,
                   const CP::SystematicSet& fullAffecting,
                   const std::vector<CP::SystematicSet>& sysList)
  {
    const CP::SystematicSet affecting = svc.getObjectSystematics (m_inputName);

    for (auto& sys : sysList)
    {
      CP::SystematicSet inputSys;
      ANA_CHECK (SystematicSet::filterForAffectingSystematics (sys, affecting, inputSys));
      std::string inputName;
      ANA_CHECK (svc.makeSystematicsName (inputName, m_inputName, inputSys));
      m_nameCache.emplace (sys, std::make_tuple (inputName, "", ""));
    }

    if (!m_outputName.empty())
    {
      ANA_MSG_DEBUG ("SysCopyHandle: " << m_inputName << " make copy " << m_outputName);
      ANA_CHECK (svc.setObjectSystematics (m_outputName, fullAffecting));
      for (auto& sys : sysList)
      {
        std::string outputName;
        ANA_CHECK (svc.makeSystematicsName (outputName, m_outputName, sys));
        auto& cache = m_nameCache[sys];
        std::get<1>(cache) = outputName;
        std::get<2>(cache) = outputName+"Aux.";
        ANA_MSG_DEBUG ("SysCopyHandle: " << std::get<0>(cache) << " -> " << std::get<1>(cache) << " (" << sys.name() << ")");
      }
    }
    if (!m_evtStore)
      m_evtStore = m_evtStoreGetter();
    return StatusCode::SUCCESS;
  }
}
