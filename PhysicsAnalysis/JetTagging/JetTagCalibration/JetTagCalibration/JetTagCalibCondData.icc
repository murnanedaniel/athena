/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

#include "TObject.h"
#include <string>
#include <utility>
#include <algorithm>

namespace Analysis {

template <class T> T* JetTagCalibCondData::retrieveTObject(const std::string& folder, const std::string& channel, const std::string& hname) const {
  T* h = 0;
  std::string channelAlias = this->getChannelAlias(channel);

  ATH_MSG_DEBUG("#BTAG# retrieving " << hname
                << " (channel " << channel << " -> " << channelAlias << ") "
                << " in folder " << folder);
  for(unsigned int i=0;i<m_taggers.size();i++) {
      if(folder==m_taggers[i]) {
        std::string fname = this->fullHistoName(channelAlias,hname);
        ATH_MSG_DEBUG("#BTAG#    folder " << folder << " found in pos " << i
                      << " , retrieving " << fname);
        auto mI = m_histos[i].find(fname);
        if(mI!=m_histos[i].end()) {
          ATH_MSG_DEBUG("#BTAG#    histo found: " << hname);
          h = mI->second.get();
          if(h) {
            ATH_MSG_DEBUG("#BTAG#    histo pointer is valid.");
          } else {
            ATH_MSG_DEBUG("#BTAG#    histo pointer is NOT valid.");
          }  
          break;
        } else {
          ATH_MSG_DEBUG("#BTAG#    histo not found in folder: " << hname);
        }
     }
  }
  return h;
}

}
