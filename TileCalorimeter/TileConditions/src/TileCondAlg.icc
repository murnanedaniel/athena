/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

#include "TileCalibBlobObjs/TileCalibUtils.h"

#include "StoreGate/ReadCondHandle.h"
#include "StoreGate/WriteCondHandle.h"

#include "TileCondAlg.h"

template<class CONDDATA, class CALIBDATA>
StatusCode TileCondAlg<CONDDATA, CALIBDATA>::initialize() {

  ATH_CHECK( m_conditionsProxy.retrieve() );
  ATH_CHECK( m_condDataKey.initialize() );

  return StatusCode::SUCCESS;
}

template<class CONDDATA, class CALIBDATA>
StatusCode TileCondAlg<CONDDATA, CALIBDATA>::execute(const EventContext& ctx) const {

  SG::WriteCondHandle<CONDDATA> condData{m_condDataKey, ctx};
  if (condData.isValid()) {
    ATH_MSG_DEBUG("Found valid TileCondData: " << condData.key());
    return StatusCode::SUCCESS;
  }

  // Define validity of the output cond object
  EventIDRange eventRange;
  auto calibData = std::make_unique<TileCalibData<CALIBDATA>>();

  ATH_CHECK( m_conditionsProxy->fillCalibData(*calibData, eventRange) );

  ATH_CHECK( checkData(*calibData) );

  auto data = std::make_unique<CONDDATA>(std::move(calibData));

  if(condData.record(eventRange, std::move(data)).isFailure()) {
    ATH_MSG_ERROR("Could not record TileCondData object with "
                  << condData.key()
                  << " with EventRange " << eventRange
                  << " into Conditions Store");
    return StatusCode::FAILURE;
  } else {

    ATH_MSG_VERBOSE("Recorded TileCondData object with "
                   << condData.key()
                   << " with EventRange " << eventRange
                   << " into Conditions Store");
  }


  return StatusCode::SUCCESS;
}
