//Dear emacs, this is -*- c++ -*-
/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

//#include "TileCalibCondAlg.h"
#include "TileCalibBlobObjs/TileCalibUtils.h"

#include "StoreGate/ReadCondHandle.h"
#include "StoreGate/WriteCondHandle.h"

template<class T>
TileCalibCondAlg<T>::TileCalibCondAlg(const std::string& name, ISvcLocator* pSvcLocator) :
  AthAlgorithm(name, pSvcLocator)
{

}

template<class T>
TileCalibCondAlg<T>::~TileCalibCondAlg() {
}

template<class T>
StatusCode TileCalibCondAlg<T>::initialize() {

  ATH_CHECK( m_conditionsProxy.retrieve() );
  ATH_CHECK( m_calibDataKey.initialize() );

  return StatusCode::SUCCESS;
}

template<class T>
StatusCode TileCalibCondAlg<T>::execute() {

  SG::WriteCondHandle<TileCalibData<T> > calibData{m_calibDataKey};

  if (calibData.isValid()) {
    ATH_MSG_DEBUG("Found valid TileCalibData: " << calibData.key());
    return StatusCode::SUCCESS;
  }

  // Define validity of the output cond object
  EventIDRange eventRange;
  std::unique_ptr<TileCalibData<T>> data = std::make_unique<TileCalibData<T>>();

  ATH_CHECK( m_conditionsProxy->fillCalibData(*data, eventRange) );

  if(calibData.record(eventRange, data.release()).isFailure()) {
    ATH_MSG_ERROR("Could not record TileCalibData object with "
                  << calibData.key()
                  << " with EventRange " << eventRange
                  << " into Conditions Store");
    return StatusCode::FAILURE;
  } else {

    ATH_MSG_VERBOSE("Recorded TileCalibData object with "
                   << calibData.key()
                   << " with EventRange " << eventRange
                   << " into Conditions Store");
  }


  return StatusCode::SUCCESS;

}

template<class T>
StatusCode TileCalibCondAlg<T>::finalize() {
  return StatusCode::SUCCESS;
}
