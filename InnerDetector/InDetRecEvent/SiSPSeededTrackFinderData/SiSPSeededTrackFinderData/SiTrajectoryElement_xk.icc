/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

#include <type_traits>

///////////////////////////////////////////////////////////////////
// Search clusters compatible with track
///////////////////////////////////////////////////////////////////

template<typename T>
int InDet::SiTrajectoryElement_xk::searchClustersSub
(Trk::PatternTrackParameters& Tp, SiClusterLink_xk* L) {
  /// Case a): No PRD association in use
  if (not m_useassoTool) {
    /// a1): No stereo
    if (not m_stereo) {
      if (m_ndf == 2) {
        return searchClustersWithoutStereoPIX<T>(Tp, L);
      } else {
        return searchClustersWithoutStereoSCT<T>(Tp, L);
      }
    }
    /// a2): With stereo 
    else {
      return searchClustersWithStereo<T>(Tp, L);
    }
  } 
  /// Case b) Using PRD association tool 
  else {
    /// b1): no stereo 
    if (not m_stereo) {
      if (m_ndf == 2) {
        return searchClustersWithoutStereoAssPIX<T>(Tp, L,*m_prdToTrackMap);
      } else {
        return searchClustersWithoutStereoAssSCT<T>(Tp, L,*m_prdToTrackMap);
      }
    } 
    /// b2): with stereo
    else {
      return searchClustersWithStereoAss<T>(Tp, L, *m_prdToTrackMap);
    }
  }
}

///////////////////////////////////////////////////////////////////
// Search closest cluster with stereo angle
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithStereo
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L) 
{
  if (m_detstatus<=0) return 0;

  const AmgSymMatrix(5) & Tp_cov = *Tp.covariance();

  int nLinksFound     = 0;
  /// predicted local position
  double P0  = Tp.parameters()[0];
  double P1  = Tp.parameters()[1];
  /// covariance for prediction 
  double PV0 = Tp_cov(0, 0);   /// X,X
  double PV1 = Tp_cov(0, 1);   /// X,Y
  double PV2 = Tp_cov(1, 1);   /// Y,Y
  /// chi² cut values 
  double Xc  = m_xi2maxlink;     
  double bestX2  = m_xi2maxlink;
  double Xm  = m_xi2max    ;
  int    nm  = m_tools->isITkGeometry() ? m_tools->maxclusters() : 10;

  /// holder for best cluster seen not pasing cuts
  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  /// loop over all clusters on this element
  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p);
    const Amg::Vector2D&    M = c->localPosition();
    const Amg::MatrixX&     V = c->localCovariance();

    double MV0 = V(0,0);
    double MV1 = V(1,0);
    double MV2 = V(1,1);
    /// add the two covariances
    double v0  = MV0+PV0;
    double v1  = MV1+PV1;
    double v2  = MV2+PV2;
    /// get the distance from the cluster to the predicted location
    double r0  = M[0]-P0;
    double r1  = M[1]-P1;
    /// determinant of the cov matrix
    double d   = v0*v2-v1*v1; 
    if(d<=0.) continue; 
    d=1./d;

    /// chi² calculation 
    double x   = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))*d;
    if(x > Xc) continue;  /// if we don't satisfy the minimum, don't bother further

    /// refine y estimate 
    r1  = fabs(r1+d*((PV1*v2-PV2*v1)*r0+(PV2*v0-PV1*v1)*r1));  
    x  -= (r1*r1)/MV2                                       ;
    r1 -= m_halflength                                      ;
    
    /// update the chi² estimate, and check again the cut
    if(r1 > 0.){
      x+=(r1*r1)/PV2; 
      if (x > Xc) continue;
    }
    /// if we satisfy the chi2 criterion: 
    if(x < Xm) {
      /// create a cluster link to this cluster
      InDet::SiClusterLink_xk l(c,x);

      /// This misleadingly named method actually is a sorting 
      /// Mechanism: Our current link will take the place of the one 
      /// it replaces in ascending chi², and we will be 
      /// left with a link to the worst chi² one  
      for(int i=0; i!=nLinksFound; ++i) L[i].Comparison(l);
      /// Now our link points not the the cluster we just processed but the worst
      /// so far

      /// If we have less than nm saved, save it in the next slot
      if(nLinksFound<nm){
         L[nLinksFound++]=l;
      } else {
         /// otherwise, don't add it, and update the chi2 cut to 
         /// the worst one in our list, to get rid of further 
         /// candidates early on. 
         Xm=L[nm-1].xi2();
      }

      /// finally, update the chi2 cut - don't bother with anything worse
      /// than the current candidate by 6 units in chi2
      Xc = Xm+6.;
    } /// done with branch if we satisfy the chi2 criterion
    /// if we have no links yet and this is the best chi2 so far 
    else if(!nLinksFound && x < bestX2) {
      /// update best chi2 
      bestX2 = x; 
      /// update max cut 
      Xc = x+6.; 
      /// update best cluster pointer
      cl = c;
    }
  } /// end cluster loop 
  /// If we didn't find any cluster satisfying the chi2 cut, 
  /// but have at least one cluster, 
  /// we write one link to the best (of the bad) candidate
  if(cl && !nLinksFound) {L[nLinksFound++].Set(cl,bestX2);}
  /// return number of found links
  return nLinksFound;
}

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for pixels
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoPIX
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L) 
{
  if (m_detstatus<=0) return 0;

  const AmgSymMatrix(5) & Tp_cov = *Tp.covariance();
  int nLinksFound     = 0;
  /// predicted local position
  double P0  = Tp.parameters()[0];
  double P1  = Tp.parameters()[1];
  /// covariance of prediction
  double PV0 = Tp_cov(0, 0);
  double PV1 = Tp_cov(0, 1);
  double PV2 = Tp_cov(1, 1);
  /// chi2 cuts
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;
  int    nm  = m_tools->isITkGeometry() ? m_tools->maxclusters() : 10;

  /// best cluster seen
  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  /// loop over all hits
  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 
    const Amg::Vector2D& M = c->localPosition();

    /// estimate the covariance by the pitch
    /// Factors 1/sqrt(12) will be added later
    double MV0 = c->width().phiR();
    double MV2 = c->width().z   ();

    /// squared distance between prediction and hit location, 
    double r0  = M[0]-P0, 
    r02 = r0*r0; 
    double r1  = M[1]-P1, 
    r12 = r1*r1;

    /// sum cov on X - using 1/sqrt(12) update of hit cov
    double v0  = s_oneOverTwelve*(MV0*MV0)+PV0;
    /// bail out if X alone sufficient to fail chi2 
    if(r02 >(Xc*v0)) continue;

    /// sum cov on Y - using 1/sqrt(12) update of hit cov
    double v2  = s_oneOverTwelve*(MV2*MV2)+PV2;
    /// bail out if Y alone sufficient to fail chi2 
    if(r12 >(Xc*v2)) continue;
    double v1  =                  PV1;
    /// determinant of cov matrix 
    double d   = v0*v2-v1*v1;          
    if(   d<=0.    ) continue;
    /// chi2 
    double x   = (r02*v2+r12*v0-(r0*r1)*(2.*v1))/d;

    /// skip clusters failing the cut
    if(x>Xc) continue;

    /// if we satisfy the tighter requirement: 
    if(x < Xm) {
      /// set up a cluster link 
      InDet::SiClusterLink_xk l(c,x);
      /// This misleadingly named method actually is a sorting 
      /// Mechanism: Our current link will take the place of the one 
      /// it replaces in ascending chi², and we will be 
      /// left with a link to the worst chi² one  
      for(int i=0; i!=nLinksFound; ++i) L[i].Comparison(l);
      /// and place the worst link (remember that l is now a different link, see above)!
      /// If within capacity, increment counter and add
      if(nLinksFound<nm) L[nLinksFound++]=l;
      /// otherwise increment cut to avoid bothering with lower qualities in the future
      else Xm=L[nm-1].xi2();
      /// update looser chi2 cut to match the tighter one - we found at least one good cluster
      Xc = Xm;
    }
    /// if we found no clusters yet satisfying the chi2 cut, use this one 
    else if(!nLinksFound) {
      Xc = x; cl = c;
    }
  } /// end of cluster loop 
  /// if we found no cluster satisfying the chi2, we return one link to the best (least bad) we saw 
  if(cl && !nLinksFound) {
    L[nLinksFound++].Set(cl,Xc);
  }
  return nLinksFound;
} 

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for SCT 
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoSCT
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L) 
{
  if (m_detstatus<=0) return 0;

  const AmgSymMatrix(5) & Tp_cov = *Tp.covariance();
  int nLinksFound     = 0;
  /// predicted local position
  double P0  = Tp.parameters()[0];
  double P1  = Tp.parameters()[1];
  /// and cov of prediction
  double PV0 = Tp_cov(0, 0);
  double PV1 = Tp_cov(0, 1);
  double PV2 = Tp_cov(1, 1);
  /// chi2 cuts
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;
  int    nm  = m_tools->isITkGeometry() ? m_tools->maxclusters() : 10;
  /// best cluster seen 
  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  /// loop over all hits on this element
  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 
    const Amg::Vector2D& M = c->localPosition();

    /// estimate covariance by pitch 
    double MV0 = c->width().phiR()   ;
    /// include 1/sqrt(12) factor and add to contribution from pred 
    double v0  = s_oneOverTwelve*(MV0*MV0)+PV0;
    /// get residual in X 
    double r0  = M[0]-P0;
    /// one over cov
    double d   = 1./v0;
    /// chi2 
    double x   = (r0*r0)*d;
    
    /// stop if chi2 too large 
    if(x>Xc) continue;
    /// estimate of Y residual
    double dP1 = (P1-M[1])+PV1*d*r0;

    /// if residual beyond half-length: assume hit is on very end of strip and 
    /// re-evaluate chi2 with a penalty term on the Y coordinate
    if(std::abs(dP1) > m_halflength) {
      double r1 = M[1]-P1;
      if(m_tools->isITkGeometry()){
         if(dP1 > m_halflength) r1 += m_halflength;
         else r1 -= m_halflength;
      }
      else{
         r1 = (dP1 > m_halflength ?m_halflength-P1 : -(m_halflength+P1));
      }
      double v1 = PV1;
      double v2 = PV2;  
      /// determinant of 2D covariance (only contribution from hit on X,X) 
      d = v0*v2-v1*v1  ; 
      if(d<=0.) continue; 
      /// updated chi2 estimate, with penalty for being at end of strip
      x = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))/d;
      /// and re-apply cut
      if(x>Xc) continue;
    } /// end of branch for Y residual beyond half-length

    /// if we satisfy the minimum criterion: 
    if(x < Xm) {
      /// create a cluster link for our firend
      InDet::SiClusterLink_xk l(c,x);
      /// This misleadingly named method actually is a sorting 
      /// Mechanism: Our current link will take the place of the one 
      /// it replaces in ascending chi², and we will be 
      /// left with a link to the worst chi² one  
      for(int i=0; i!=nLinksFound; ++i) L[i].Comparison(l);
      /// and place the worst link so far at the end if space. 
      if(nLinksFound<nm) L[nLinksFound++]=l;
      /// otherwise, update chi2 cut to not bother with worse clusters anymore
      else Xm=L[nm-1].xi2();
      /// update looser chi2 to match the tighter one - we have at least one good link now
      Xc = Xm;
    }
    /// if we didn't find any good links yet, keep this one as best so far 
    /// update looser chi2 cut to only keep better candidates in the future 
    else if(!nLinksFound) {Xc = x; cl = c;}
  }
  /// if we found no clusters satisfying the chi2 cut, we return 
  /// a single link to the best (least bad) candidate
  if(cl && !nLinksFound) {L[nLinksFound++].Set(cl,Xc);}
  return nLinksFound;
}

///////////////////////////////////////////////////////////////////
// Search closest cluster with stereo angle
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithStereoAss
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L, const Trk::PRDtoTrackMap &prd_to_track_map) 
{

  /// for detailed documentation, please see searchClustersWithStereo

  if (m_detstatus<=0) return 0;

  const AmgSymMatrix(5) & Tp_cov = *Tp.covariance();
  int nLinksFound     = 0;
  double P0  = Tp.parameters()[0];
  double P1  = Tp.parameters()[1];
  double PV0 = Tp_cov(0, 0);
  double PV1 = Tp_cov(0, 1);
  double PV2 = Tp_cov(1, 1);
  double Xc  = m_xi2maxlink;
  double Xl  = m_xi2maxlink;
  double Xm  = m_xi2max    ;
  int    nm  = m_tools->isITkGeometry() ? m_tools->maxclusters() : 10;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;
  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 

    /// check the PRD association map, skip clusters already in use 
    if (prd_to_track_map.isUsed(*c)) continue;

    const Amg::Vector2D& M = c->localPosition();
    const Amg::MatrixX& V = c->localCovariance();

    double MV0 = V(0,0);
    double MV1 = V(1,0);
    double MV2 = V(1,1);
    double v0  = MV0+PV0;
    double v1  = MV1+PV1;
    double v2  = MV2+PV2;
    double r0  = M[0]-P0;
    double r1  = M[1]-P1;
    double d   = v0*v2-v1*v1;
    if(d<=0.) continue;
    d=1./d;
    double x   = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))*d;
    if(x > Xc) continue;

    r1  = fabs(r1+d*((PV1*v2-PV2*v1)*r0+(PV2*v0-PV1*v1)*r1));  
    x  -= (r1*r1)/MV2                                       ;
    r1 -= m_halflength                                      ;
    
    if(r1 > 0. &&  (x+=((r1*r1)/PV2)) > Xc) continue;

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      /// This misleadingly named method actually is a sorting 
      /// Mechanism: Our current link will take the place of the one 
      /// it replaces in ascending chi², and we will be 
      /// left with a link to the worst chi² one  
      for(int i=0; i!=nLinksFound; ++i) L[i].Comparison(l);
      if(nLinksFound<nm) L[nLinksFound++]=l;
      else Xm=L[nm-1].xi2();
      Xc = Xm+6.;
    }
    else if(!nLinksFound && x < Xl) {Xl = x; Xc = x+6.; cl = c;}
  }
  if(cl && !nLinksFound) {L[nLinksFound++].Set(cl,Xl);}
  return nLinksFound;
}

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for pixels
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoAssPIX
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L, const Trk::PRDtoTrackMap &prd_to_track_map)
{
  /// for detailed documentation, please see searchClustersWithoutStereoPIX
  if (m_detstatus<=0) return 0;

  const AmgSymMatrix(5) & Tp_cov = *Tp.covariance();
  int nLinksFound     = 0;
  double P0  = Tp.parameters()[0];
  double P1  = Tp.parameters()[1];
  double PV0 = Tp_cov(0, 0);
  double PV1 = Tp_cov(0, 1);
  double PV2 = Tp_cov(1, 1);
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;
  int    nm  = m_tools->isITkGeometry() ? m_tools->maxclusters() : 10;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p);
    if (prd_to_track_map.isUsed(*c)) continue;
    const Amg::Vector2D& M = c->localPosition();

    double MV0 = c->width().phiR();
    double MV2 = c->width().z   ();

    double r0  = M[0]-P0, r02 = r0*r0; 
    double r1  = M[1]-P1, r12 = r1*r1;

    double v0  = s_oneOverTwelve*(MV0*MV0)+PV0; if(r02 >(Xc*v0)) continue;
    double v2  = s_oneOverTwelve*(MV2*MV2)+PV2; if(r12 >(Xc*v2)) continue;
    double v1  =                  PV1;
    double d   = v0*v2-v1*v1;          if(   d<=0.    ) continue;
    double x   = (r02*v2+r12*v0-(r0*r1)*(2.*v1))/d;

    if(x>Xc) continue;

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      /// This misleadingly named method actually is a sorting 
      /// Mechanism: Our current link will take the place of the one 
      /// it replaces in ascending chi², and we will be 
      /// left with a link to the worst chi² one  
      for(int i=0; i!=nLinksFound; ++i) L[i].Comparison(l);
      if(nLinksFound<nm) L[nLinksFound++]=l; else Xm=L[nm-1].xi2();
      Xc = Xm;
    }
    else if(!nLinksFound) {Xc = x; cl = c;}
  }
  if(cl && !nLinksFound) {L[nLinksFound++].Set(cl,Xc);}
  return nLinksFound;
} 

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for SCT 
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoAssSCT
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L, const Trk::PRDtoTrackMap &prd_to_track_map) 
{
  /// for detailed documentation, please see searchClustersWithoutStereoSCT
  if (m_detstatus<=0) return 0;

  const AmgSymMatrix(5) & Tp_cov = *Tp.covariance();
  int nLinksFound     = 0;
  double P0  = Tp.parameters()[0];
  double P1  = Tp.parameters()[1];
  double PV0 = Tp_cov(0, 0);
  double PV1 = Tp_cov(0, 1);
  double PV2 = Tp_cov(1, 1);
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;
  int    nm  = m_tools->isITkGeometry() ? m_tools->maxclusters() : 10;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 
    if (prd_to_track_map.isUsed(*c)) continue;
    const Amg::Vector2D& M = c->localPosition();

    double MV0 = c->width().phiR()   ;
    double v0  = s_oneOverTwelve*(MV0*MV0)+PV0;
    double r0  = M[0]-P0;
    double d   = 1./v0;
    double x   = (r0*r0)*d;
    
    if(x>Xc) continue;
    
    double dP1 = (P1-M[1])+PV1*d*r0;

    if(fabs(dP1) > m_halflength) {

      double r1 = M[1]-P1;
      if(m_tools->isITkGeometry()){
         if(dP1 > m_halflength) r1 += m_halflength;
         else r1 -= m_halflength;
      }
      else{
         r1 = (dP1 > m_halflength ?m_halflength-P1 : -(m_halflength+P1));
      }
      
      double v1 = PV1;
      double v2 = PV2;  
      d = v0*v2-v1*v1  ; if(d<=0.) continue; 
      x = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))/d;
      if(x>Xc) continue;
    }

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      /// This misleadingly named method actually is a sorting 
      /// Mechanism: Our current link will take the place of the one 
      /// it replaces in ascending chi², and we will be 
      /// left with a link to the worst chi² one  
      for(int i=0; i!=nLinksFound; ++i) L[i].Comparison(l);
      if(nLinksFound<nm) L[nLinksFound++]=l; else Xm=L[nm-1].xi2();
      Xc = Xm;
    }
    else if(!nLinksFound) {Xc = x; cl = c;}
  }
  if(cl && !nLinksFound) {L[nLinksFound++].Set(cl,Xc);}
  return nLinksFound;
}

///////////////////////////////////////////////////////////////////
// Set trajectory element
///////////////////////////////////////////////////////////////////

// T = InDet::SiClusterCollection::const_iterator or
//     InDet::PixelClusterCollection::const_iterator or
//     InDet::SCT_ClusterCollection::const_iterator
template <typename T>
bool InDet::SiTrajectoryElement_xk::set
(int st,
 const InDet::SiDetElementBoundaryLink_xk*& dl,
 const T& sb, 
 const T& se,
 const InDet::SiCluster* si,
 [[maybe_unused]] const EventContext& ctx)
{
  if      (std::is_same<T, InDet::SiClusterCollection::const_iterator>::value)    m_itType = SiClusterColl;
  else if (std::is_same<T, InDet::PixelClusterCollection::const_iterator>::value) m_itType = PixelClusterColl;
  else if (std::is_same<T, InDet::SCT_ClusterCollection::const_iterator>::value)  m_itType = SCT_ClusterColl;

  m_fieldMode    = false; 
  if(m_tools->fieldTool().magneticFieldMode()!=0) m_fieldMode = true;
  m_status       = 0                       ;
  m_detstatus    = st                      ;
  m_nMissing        = 0                       ;
  m_nlinksForward      = 0                       ;
  m_nlinksBackward     = 0                       ;
  m_nholesForward      = 0                       ;
  m_nholesBackward     = 0                       ;
  m_dholesForward      = 0                       ;
  m_dholesBackward     = 0                       ;
  m_nclustersForward   = 0                       ;
  m_nclustersBackward  = 0                       ;
  m_npixelsBackward    = 0                       ;
  m_ndfForward         = 0                       ;
  m_ndfBackward        = 0                       ;
  m_ntsos              = 0                       ;
  m_detelement         = dl->detElement()        ;
  m_detlink            = dl                      ;
  m_surface            = &m_detelement->surface(); if(!m_surface && m_tools->isITkGeometry()) return false;
  m_sibegin            = sb                      ;
  m_siend              = se                      ; 
  m_cluster            = si                      ;
  m_clusterOld         = si                      ;
  m_clusterNoAdd       = 0                       ;
  m_stereo             = false                   ; 
  m_xi2Forward         = 10000.                  ;
  m_xi2Backward        = 10000.                  ;
  m_xi2totalForward    = 0.                      ;
  m_xi2totalBackward   = 0.                      ;
  m_tools->electron() ? m_xi2max = m_tools->xi2maxBrem() : m_xi2max = m_tools->xi2max();
  m_halflength   = 0.                      ;
  m_detelement->isSCT() ? m_ndf=1 : m_ndf=2;

  if(m_tools->heavyion()) {
    if(m_ndf==2) {m_xi2max = 13.; m_xi2maxNoAdd = 13.;}
    else         {m_xi2max =  4.; m_xi2maxNoAdd =  8.;}
  }

  noiseInitiate()                          ;
  (m_detelement->isSCT() && (m_detelement->design().shape()==InDetDD::Trapezoid || m_detelement->design().shape()==InDetDD::Annulus)   ) ? 
    m_stereo = true : m_stereo = false;

  if(m_detstatus && m_ndf == 1){
    m_halflength = si ? si->width().z()*.5 : (*sb)->width().z()*.5;
  }

  if(!m_detstatus) {

    IdentifierHash idHash = m_detelement->identifyHash();
    if (m_ndf==2) {
       if (m_tools->pixelStatus() ?  !m_tools->pixelStatus()->at(idHash) :  !m_tools->pixcond()->isGood(idHash, ctx) ) {
           m_detstatus = -1;
       }
    }
    else {
       if (m_tools->sctStatus() ?  !m_tools->sctStatus()->at(idHash) :  !m_tools->sctcond()->isGood(idHash, ctx) ) {
           m_detstatus = -1;
       }
    }
    VALIDATE_STATUS_ARRAY(m_tools->pixelStatus() && m_tools->sctStatus(), ((m_ndf==2) ? m_tools->pixelStatus() : m_tools->sctStatus())->at(idHash),  ( (m_ndf==2) ? m_tools->pixcond() : m_tools->sctcond())->isGood(idHash, ctx));

  }

  const Amg::Transform3D& tr = m_surface->transform();
  //Initialise material corrections
  m_radlength = 0.03; 
  if(m_tools->isITkGeometry()) m_radlength = 0.04;
  /// add material for the forward pixels
  if(m_ndf == 2 && std::abs(tr(2,2)) >= 1.) m_radlength = .07;
  if(m_tools->isITkGeometry()) m_radlengthN=m_radlength;

  m_localTransform[ 0] = tr(0,0); m_localTransform[ 1]=tr(1,0); m_localTransform[ 2]=tr(2,0);
  m_localTransform[ 3] = tr(0,1); m_localTransform[ 4]=tr(1,1); m_localTransform[ 5]=tr(2,1);
  m_localTransform[ 6] = tr(0,2); m_localTransform[ 7]=tr(1,2); m_localTransform[ 8]=tr(2,2);
  m_localTransform[ 9] = tr(0,3); m_localTransform[10]=tr(1,3); m_localTransform[11]=tr(2,3);
  m_localTransform[12] = m_localTransform[ 9]*m_localTransform[ 6]+m_localTransform[10]*m_localTransform[ 7]+m_localTransform[11]*m_localTransform[ 8];
  m_localDir[0] = 1.; 
  m_localDir[1] = 0.; 
  m_localDir[2] = 0.;
  return true;
}

///////////////////////////////////////////////////////////////////
// Forward propagation for search closest cluster
///////////////////////////////////////////////////////////////////

// T = InDet::SiClusterCollection::const_iterator or
//     InDet::PixelClusterCollection::const_iterator or
//     InDet::SCT_ClusterCollection::const_iterator
template <typename T>
bool InDet::SiTrajectoryElement_xk::ForwardPropagationForClusterSeach
(int n,
 const Trk::TrackParameters& Tpa,
 const InDet::SiDetElementBoundaryLink_xk*& dl,
 const T& sb, 
 const T& se)
{
  if      (std::is_same<T, InDet::SiClusterCollection::const_iterator>::value)    m_itType = SiClusterColl;
  else if (std::is_same<T, InDet::PixelClusterCollection::const_iterator>::value) m_itType = PixelClusterColl;
  else if (std::is_same<T, InDet::SCT_ClusterCollection::const_iterator>::value)  m_itType = SCT_ClusterColl;

  m_detstatus    = 1                       ;
  m_sibegin      = sb                      ;
  m_siend        = se                      ; 
  m_detelement   = dl->detElement()        ;
  m_detlink      = dl                      ;
  m_surface      = &m_detelement->surface();
  m_detelement->isSCT() ? m_ndf=1 : m_ndf=2;
  m_halflength   = 0.                      ;
  m_stereo       = false                   ;

  (m_detelement->isSCT() && m_detelement->design().shape()==InDetDD::Trapezoid) ? 
    m_stereo = true : m_stereo = false;

  if(m_detstatus && m_ndf == 1) m_halflength = (*sb)->width().z()*.5;

  if(!n) {
    Trk::PatternTrackParameters Tp; if(!Tp.production(&Tpa)) return false;
    if(!propagateParameters(Tp,m_parametersPredForward,m_step)) return false;
 
    if(!m_parametersPredForward.iscovariance()) {

      double cv[15]={ .02 ,
                      0., .02,
                      0., 0.,.000001,
                      0., 0.,   0.,.000001,
                      0., 0.,   0.,   0.,.000000001};
      
      m_parametersPredForward.setCovariance(cv);
    }
  }
  else {
    if(!propagate(m_parametersPredForward,m_parametersPredForward,m_step)) return false;
  }
  m_nlinksForward=searchClusters(m_parametersPredForward,m_linkForward);
  return true;
}

///////////////////////////////////////////////////////////////////
// Forward propagation for search closest cluster
///////////////////////////////////////////////////////////////////

// T = InDet::SiClusterCollection::const_iterator or
//     InDet::PixelClusterCollection::const_iterator or
//     InDet::SCT_ClusterCollection::const_iterator
template <typename T>
void InDet::SiTrajectoryElement_xk::CloseClusterSeach
(Trk::PatternTrackParameters& Tpa,
 const InDet::SiDetElementBoundaryLink_xk*& dl,
 const T& sb, 
 const T& se)
{
  if      (std::is_same<T, InDet::SiClusterCollection::const_iterator>::value)    m_itType = SiClusterColl;
  else if (std::is_same<T, InDet::PixelClusterCollection::const_iterator>::value) m_itType = PixelClusterColl;
  else if (std::is_same<T, InDet::SCT_ClusterCollection::const_iterator>::value)  m_itType = SCT_ClusterColl;

  m_detstatus    = 1                       ;
  m_cluster      = 0                       ;
  m_sibegin      = sb                      ;
  m_siend        = se                      ; 
  m_detelement   = dl->detElement()        ;
  m_detlink      = dl                      ;
  m_surface      = &m_detelement->surface();
  m_detelement->isSCT() ? m_ndf=1 : m_ndf=2;
  m_halflength   = 0.                      ;
  m_stereo       = false                   ;

  (m_detelement->isSCT() && m_detelement->design().shape()==InDetDD::Trapezoid) ? 
    m_stereo = true : m_stereo = false;
  if(m_detstatus && m_ndf == 1) m_halflength = (*sb)->width().z()*.5;
  /// in this case, we do not wish to overwrite the m_inside member.
  /// So store the old value and restore after the check. 
  int inside_originalVal = m_inside; 
  checkBoundaries(Tpa); 
  if(m_inside > 0 || !searchClusters(Tpa,m_linkForward)) {
    m_inside = inside_originalVal; 
    return;
  }
  m_inside = inside_originalVal; 
  m_cluster = m_linkForward[0].cluster();
  m_xi2Forward    = m_linkForward[0].xi2    ();
}
