//dear emacs, this is -*-c++-*-

/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

template<class T>
StatusCode LArFlatConditionsAlg<T>::initialize() {
  // Read Handles
  ATH_CHECK( m_readKey.initialize() );
  ATH_CHECK( m_writeKey.initialize() );

  return StatusCode::SUCCESS;
}


template<class T>
StatusCode LArFlatConditionsAlg<T>::execute() {
    
  SG::WriteCondHandle<T> writeHandle{m_writeKey};
  
  if (writeHandle.isValid()) {
    ATH_MSG_DEBUG("Found valid write handle");
    return StatusCode::SUCCESS;
  }  

  SG::ReadCondHandle<CondAttrListCollection> readHandle{m_readKey};
  const CondAttrListCollection* attr{*readHandle};
  if (attr==nullptr) {
    msg(MSG::ERROR) << "Failed to retrieve CondAttributeListCollection with key " << m_readKey.key() << endmsg;
    return StatusCode::FAILURE;
  }
  writeHandle.addDependency(readHandle);

  std::unique_ptr<T> flat=std::make_unique<T>(attr);
  
  if(writeHandle.record(std::move(flat)).isFailure()) {
    ATH_MSG_ERROR("Could not record LArFlatConditions object with " 
		  << writeHandle.key() 
		  << " with EventRange " << writeHandle.getRange()
		  << " into Conditions Store");
    return StatusCode::FAILURE;
  }
  ATH_MSG_INFO("recorded new " << writeHandle.key() << " with range " 
	       << writeHandle.getRange() << " into Conditions Store");

 
  return StatusCode::SUCCESS;
}

