// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

#ifndef TRIGT1RESULT_MUCTPI_RDO_H
#define TRIGT1RESULT_MUCTPI_RDO_H

// STL include(s):
#include <vector>
#include <string>
#include <cstdint>

// Gaudi/Athena include(s):
#include "AthenaKernel/CLASS_DEF.h"

/**
 *   $Date: 2007-07-05 13:26:22 $
 *
 *   @short Class representing the readout data of the MuCTPI hardware and simulation
 *
 *          The MuCTPI hardware and the simulation can send all the muon candidates
 *          recevied in a maximal window spanning +-2 BCs around the triggered BC 
 *          (giving a window of maximally 5 BCs) together with the muon multiplicities
 *          in the same window to the readout system. This class represents the ROD
 *          fragment generated by the MuCTPI to Athena.
 *
 *          For a detailed description of the data format of the MuCTPI, see
 *          the MIROD documentation (https://edms.cern.ch/file/248757/1/mirod.pdf).
 *
 *     @see LVL1MUCTPI::L1Muctpi
 *     @see MuCTPIByteStreamCnv
 *
 *  @author Tadashi Maeno <tmaeno@bnl.gov>
 *  @author Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
 *  @author David Berge <David.Berge@cern.ch>
 *
 * @version $Revision: 1.9 $
 */
class MuCTPI_RDO {

public:
  /// Enumeration defining the different sources for the muon candidates
  enum SectorLocation { BARREL = 0, ENDCAP = 1, FORWARD = 2 };


  /// "Intermediate" constructor
  /**
   * This constructor is tipically used for filling the object with information
   * about muon candidates from one bunch crossing.
   *
   * @param candidateMultiplicity   The multiplicity word with the 6 separate 3-bit muon multiplicities
   * @param dataWord                The muon candidate data words
   */
  MuCTPI_RDO( const uint32_t candidateMultiplicity,
              std::vector< uint32_t >&& dataWord )
    : m_dataWord( std::move(dataWord) ) {
    setCandidateMultiplicity( candidateMultiplicity );
  }

  /// Full constructor
  /**
   * This constructor can be used to fill the object with the multiplicity and data words
   * from an up to +-5 buch crossing wide window.
   *
   * @param candidateMultiplicity   The multiplicity words with the 6 separate 3-bit muon multiplicities
   * @param dataWord                The muon candidate data words
   */
  MuCTPI_RDO(  std::vector< uint32_t >&& candidateMultiplicity,
               std::vector< uint32_t >&& dataWord )
    : m_candidateMultiplicity( std::move(candidateMultiplicity) ),
      m_dataWord( std::move(dataWord) ) {
  }

  /// Default constructor
  /**
   * A parameter-less constructor to be able to use the class with POOL.
   */
  MuCTPI_RDO () = default;

  /// Destructor
  /**
   * The destructor doesn't really have to do anything.
   */
  ~MuCTPI_RDO () = default;

  /// Function <strong>adding</strong> a multiplicity word to the object
  /**
   * Be careful, that contrary to its name, this function doesn't reset the multiplicity
   * word list, it only adds the specified word to the end of the list.
   *
   * @param candidateMultiplicity  The multiplicity word to be added to the object
   */
  void setCandidateMultiplicity( const uint32_t candidateMultiplicity ) {
    m_candidateMultiplicity.push_back(candidateMultiplicity);
  }
  /// Function returning the candidate multiplicity for the triggered bunch crossing
  /**
   * In case of reading out multiple BCs, the one that is considered to have triggered
   * the event is always the "center" one. (In principle you can only read out 1, 3 or
   * 5 BCs, not 2 or 4!) This function takes care of returning this one word.
   *
   * @return The "central" multiplicity word
   */
  uint32_t candidateMultiplicity() const {
    if( m_candidateMultiplicity.size() == 0 ) return 0;
    else return m_candidateMultiplicity[ ( m_candidateMultiplicity.size() - 1 ) / 2 ];
  }
  /// Function returning all candidate multiplicities
  /**
   * This function can be used to retrieve the candidate multiplicities from all the saved
   * bunch crossings.
   *
   * @return A vector of all the candidate multiplicity words
   */
  const std::vector< uint32_t >& getAllCandidateMultiplicities() const {
    return m_candidateMultiplicity;
  }

  /// Function <strong>adding</strong> a data word to the object
  /**
   * Just like with MuCTPI_RDO::setCandidateMultiplicity, be careful that this function also
   * only adds the specified data word to the list of stored data words, it doesn't reset
   * the list.
   *
   * @param dataWord  The 32-bit data word to be added to the object
   */
  void setDataWord( const uint32_t dataWord ) {
    m_dataWord.push_back( dataWord );
  }
  /// Function returning the muon candidate data words
  /**
   * The muon candidate data words returned by this function are very similar to the muon RoI words,
   * but they contain a bit more information. This is the last 3 bits of the BCID in which they
   * were created, which is important to be able to separate the muon candidates from the different
   * bunch crossings.
   *
   * @return A vector of all the muon candidate data words
   */
  const std::vector< uint32_t >& dataWord() const {
    return m_dataWord;
  }
  

private:
  /// Variable storing the multiplicity word(s) sent to the CTP
  std::vector< uint32_t > m_candidateMultiplicity;
  /// Variable storing the muon data words read out
  std::vector< uint32_t > m_dataWord;

}; // class MuCTPI_RDO

CLASS_DEF( MuCTPI_RDO , 6270 , 0 )

#endif // TRIGT1RESULT_MUCTPI_RDO_H
