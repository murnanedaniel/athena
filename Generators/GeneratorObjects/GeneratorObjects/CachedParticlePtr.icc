/*
 * Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration.
 */
/**
 * @file GeneratorObjects/CachedParticlePtr.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Feb, 2019
 * @brief Thread-safe cached particle pointer.
 */


namespace GeneratorObjects {


/**
 * @brief Default constructor.
 * Initializes to a null pointer.
 */
inline
CachedParticlePtr::CachedParticlePtr()
  : CachedParticlePtr (nullptr)
{
}


/**
 * @brief Constructor referencing a specific particle.
 * @param part The particle to reference.
 */
inline
CachedParticlePtr::CachedParticlePtr (HepMC::ConstGenParticlePtr part)
  : m_ptr (std::move (part))
{
}


/**
 * @brief Copy constructor.  (Can't be defaulted due to the atomic member.)
 */
inline
CachedParticlePtr::CachedParticlePtr (const CachedParticlePtr& other)
#if HEPMCPARTICLELINK_USE_STANDALONE_ATOMIC
  : m_ptr (std::atomic_load (&other.m_ptr))
#else
    : m_ptr (other.m_ptr.load())
#endif
{
}


/**
 * @brief Assignment.  (Can't be defaulted due to the atomic member.)
 */
inline
CachedParticlePtr& CachedParticlePtr::operator= (const CachedParticlePtr& other)
{
  if (this != &other) {
#if HEPMCPARTICLELINK_USE_STANDALONE_ATOMIC
    m_ptr = std::atomic_load (&other.m_ptr);
#else
    m_ptr = other.m_ptr.load();
#endif
  }
  return *this;
}


/**
 * @brief Reset the pointer to null.
 */
inline
void CachedParticlePtr::reset()
{
  m_ptr = HepMC::ConstGenParticlePtr (nullptr);
}


/**
 * @brief Retrieve the current value.
 */
inline
HepMC::ConstGenParticlePtr CachedParticlePtr::get() const
{
#if HEPMCPARTICLELINK_USE_STANDALONE_ATOMIC
  return std::atomic_load (&m_ptr);
#else
  return m_ptr;
#endif
}


/**
 * @brief Set the cached value of the pointer.
 * @param part Particle the pointer should be referencing.
 *
 * It is ok to call this concurrently, as long as each call uses
 * the same parameters.
 */
inline
void CachedParticlePtr::set (HepMC::ConstGenParticlePtr part) const
{
  HepMC::ConstGenParticlePtr exp = nullptr;
#if HEPMCPARTICLELINK_USE_STANDALONE_ATOMIC
  std::atomic_compare_exchange_strong (&m_ptr, &exp, part);
#else
  m_ptr.compare_exchange_strong (exp, part);
#endif
}


/**
 * @brief Check if the cached pointer is valid
 */
inline
bool CachedParticlePtr::isValid () const
{
#if HEPMCPARTICLELINK_USE_STANDALONE_ATOMIC
  return std::atomic_load (&m_ptr) != nullptr;
#else
  return m_ptr != nullptr;
#endif
}


} // namespace GeneratorObjects
