/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {
inline EnergyLoss::EnergyLoss(double deltaE,
                              double sigmaDeltaE,
                              double sMinusDeltaE,
                              double sPlusDeltaE)
  : m_deltaE(deltaE)
  , m_sigmaDeltaE(sigmaDeltaE)
  , m_sigmaMinusDeltaE(sMinusDeltaE > 0.0 ? sMinusDeltaE : sigmaDeltaE)
  , m_sigmaPlusDeltaE(sPlusDeltaE > 0.0 ? sPlusDeltaE : sigmaDeltaE)
  , m_mean_ioni(0.)
  , m_sig_ioni(0.)
  , m_mean_rad(0.)
  , m_sig_rad(0.)
  , m_length(-std::numeric_limits<double>::min())
{
}

inline EnergyLoss::EnergyLoss(double deltaE,
                              double sigmaDeltaE,
                              double sMinusDeltaE,
                              double sPlusDeltaE,
                              double mean_ioni,
                              double sig_ioni,
                              double mean_rad,
                              double sig_rad,
                              double length)
  : m_deltaE(deltaE)
  , m_sigmaDeltaE(sigmaDeltaE)
  , m_sigmaMinusDeltaE(sMinusDeltaE)
  , m_sigmaPlusDeltaE(sPlusDeltaE)
  , m_mean_ioni(mean_ioni)
  , m_sig_ioni(sig_ioni)
  , m_mean_rad(mean_rad)
  , m_sig_rad(sig_rad)
  , m_length(length)
{
}

inline EnergyLoss::EnergyLoss(double deltaE,
                              double sigmaDeltaE,
                              double mean_ioni,
                              double sig_ioni,
                              double mean_rad,
                              double sig_rad)
  : m_deltaE(deltaE)
  , m_sigmaDeltaE(sigmaDeltaE)
  , m_sigmaMinusDeltaE(0.)
  , m_sigmaPlusDeltaE(0.)
  , m_mean_ioni(mean_ioni)
  , m_sig_ioni(sig_ioni)
  , m_mean_rad(mean_rad)
  , m_sig_rad(sig_rad)
  , m_length(-std::numeric_limits<double>::min())
{
}

inline EnergyLoss*
EnergyLoss::clone() const
{
  return new EnergyLoss(*this);
}

inline double
EnergyLoss::deltaE() const
{
  return m_deltaE;
}

inline double
EnergyLoss::sigmaDeltaE() const
{
  return m_sigmaDeltaE;
}

inline double
EnergyLoss::sigmaMinusDeltaE() const
{
  return m_sigmaMinusDeltaE;
}

inline double
EnergyLoss::sigmaPlusDeltaE() const
{
  return m_sigmaPlusDeltaE;
}

inline double
EnergyLoss::meanIoni() const
{
  return m_mean_ioni;
}

inline double
EnergyLoss::sigmaIoni() const
{
  return m_sig_ioni;
}

inline double
EnergyLoss::meanRad() const
{
  return m_mean_rad;
}

inline double
EnergyLoss::sigmaRad() const
{
  return m_sig_rad;
}

inline double
EnergyLoss::length() const
{
  return m_length;
} // length can be positive and negative like Eloss depending on (back)tracking

inline void
EnergyLoss::update(double ioni, double sigi, double rad, double sigr, bool mpv)
{
  m_mean_ioni += ioni;
  m_mean_rad += rad;
  m_sig_ioni += sigi;
  m_sig_rad += sigr;
  m_deltaE += mpv ? 0.9 * ioni + 0.15 * rad : ioni + rad;
  m_sigmaDeltaE = std::sqrt(m_sig_ioni * m_sig_ioni + m_sig_rad * m_sig_rad);
}

inline void
EnergyLoss::update(const EnergyLoss& eloss, bool mpv)
{
  m_mean_ioni += eloss.meanIoni();
  m_mean_rad += eloss.meanRad();
  m_sig_ioni += eloss.sigmaIoni();
  m_sig_rad += eloss.sigmaRad();
  m_deltaE += mpv ? 0.9 * eloss.meanIoni() + 0.15 * eloss.meanRad()
                  : eloss.meanIoni() + eloss.meanRad();
  m_sigmaDeltaE = std::sqrt(m_sig_ioni * m_sig_ioni + m_sig_rad * m_sig_rad);
}

inline void
EnergyLoss::set(double eloss,
                double sigde,
                double ioni,
                double sigi,
                double rad,
                double sigr)
{
  m_mean_ioni = ioni;
  m_mean_rad = rad;
  m_sig_ioni = sigi;
  m_sig_rad = sigr;
  m_deltaE = ioni + rad + 0 * eloss;
  m_sigmaDeltaE = std::sqrt(m_sig_ioni * m_sig_ioni + m_sig_rad * m_sig_rad +
                            0 * sigde * sigde);
}

}
