/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/

/**
 * @file AlignedDynArray.icc
 * @date   26th November 2019
 * @author Anthony Morley, Christos Anastopoulos
 * @brief  AlignedDynArray implementation
 */

#include <utility>

namespace GSFUtils {

template<typename T, size_t ALIGNMENT>
inline AlignedDynArray<T, ALIGNMENT>::AlignedDynArray(const size_type n)
  : m_buffer(nullptr)
  , m_size(n)
{

  const size_t bufferSize = n * sizeof(T);
  m_buffer = static_cast<T*>(std::aligned_alloc(ALIGNMENT, bufferSize));
  std::uninitialized_default_construct(m_buffer, m_buffer + m_size);
}

template<typename T, size_t ALIGNMENT>
inline AlignedDynArray<T, ALIGNMENT>::AlignedDynArray(const size_type n,
                                                      const T& value)
  : m_buffer(nullptr)
  , m_size(n)
{
  const size_t bufferSize = n * sizeof(T);
  m_buffer = static_cast<T*>(std::aligned_alloc(ALIGNMENT, bufferSize));
  std::uninitialized_fill(m_buffer, m_buffer + m_size, value);
}

template<typename T, size_t ALIGNMENT>
inline AlignedDynArray<T, ALIGNMENT>::AlignedDynArray(
  AlignedDynArray&& other) noexcept
  : m_buffer(nullptr)
  , m_size(0)
{
  // copy over other
  m_buffer = other.m_buffer;
  m_size = other.m_size;
  // set other to invalid
  other.m_buffer = nullptr;
  other.m_size = 0;
}

template<typename T, size_t ALIGNMENT>
inline AlignedDynArray<T, ALIGNMENT>&
AlignedDynArray<T, ALIGNMENT>::operator=(AlignedDynArray&& other) noexcept
{
  // cleanup this object
  cleanup();
  // copy over other
  m_buffer = other.m_buffer;
  m_size = other.m_size;
  // set other to invalid
  other.m_buffer = nullptr;
  other.m_size = 0;

  return *this;
}

template<typename T, size_t ALIGNMENT>
inline AlignedDynArray<T, ALIGNMENT>::~AlignedDynArray()
{
  cleanup();
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::pointer
AlignedDynArray<T, ALIGNMENT>::buffer() noexcept
{
  return CxxUtils::assume_aligned<ALIGNMENT>(m_buffer);
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::const_pointer
AlignedDynArray<T, ALIGNMENT>::buffer() const noexcept
{
  return CxxUtils::assume_aligned<ALIGNMENT>(std::as_const(m_buffer));
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::reference
AlignedDynArray<T, ALIGNMENT>::operator[](
  const AlignedDynArray<T, ALIGNMENT>::size_type pos) noexcept
{
  return m_buffer[pos];
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::const_reference
AlignedDynArray<T, ALIGNMENT>::operator[](
  const AlignedDynArray<T, ALIGNMENT>::size_type pos) const noexcept
{
  return m_buffer[pos];
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::iterator
AlignedDynArray<T, ALIGNMENT>::begin() noexcept
{
  return CxxUtils::assume_aligned<ALIGNMENT>(iterator(buffer()));
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::const_iterator
AlignedDynArray<T, ALIGNMENT>::begin() const noexcept
{
  return CxxUtils::assume_aligned<ALIGNMENT>(const_iterator(buffer()));
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::iterator
AlignedDynArray<T, ALIGNMENT>::end() noexcept
{
  return iterator(buffer() + m_size);
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::const_iterator
AlignedDynArray<T, ALIGNMENT>::end() const noexcept
{
  return const_iterator(buffer() + m_size);
}

template<typename T, size_t ALIGNMENT>
inline typename AlignedDynArray<T, ALIGNMENT>::size_type
AlignedDynArray<T, ALIGNMENT>::size() const noexcept
{
  return m_size;
}

template<typename T, size_t ALIGNMENT>
bool
AlignedDynArray<T, ALIGNMENT>::empty() const noexcept
{
  return (size() == 0);
}

// private cleanup helper
template<typename T, size_t ALIGNMENT>
inline void
AlignedDynArray<T, ALIGNMENT>::cleanup()
{
  if (m_buffer) {
    for (size_type pos = 0; pos < m_size; ++pos) {
      m_buffer[pos].~T();
    }
    std::free(m_buffer);
  }
}

} // namespace GSFUtils
