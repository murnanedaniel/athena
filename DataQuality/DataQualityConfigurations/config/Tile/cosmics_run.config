# **********************************************************************
# $Id: cosmics_run.config 742068 2016-04-21 19:35:04Z harkusha $
# **********************************************************************

############################################################
# TileCal
############################################################


reference TileDigiErrorsLB {
  location = /eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/,root://eosatlas.cern.ch//eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/
  file = TileDigiErrorsReferences_20170814.root
  name = TileDigiErrorsLB
}

reference TileDigiErrorsEB {
  location = /eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/,root://eosatlas.cern.ch//eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/
  file = TileDigiErrorsReferences_20170814.root
  name = TileDigiErrorsEB
}

reference TileDigiErrorsEB_special {
  location = /eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/,root://eosatlas.cern.ch//eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/
  file = TileDigiErrorsReferences_20170814.root
  name = TileDigiErrorsEB_special
}


reference TileReference {
  location = /eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/,root://eosatlas.cern.ch//eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/
  file = data12_cos.00214303.express_express.merge.HIST.f487_m1252_harkusha_20141116._0001.1
  path = run_214303
  name = same_name
  info = Run 214303, express_express
}



#############
# Output
#############

output top_level {
  output TileCal {
    output Expert {
      output Cell {
        output bit0_RNDM {
          output AllPart {
          }
          output EBA {
          }
          output EBC {
          }
          output LBA {
          }
          output LBC {
          }
        }
      }
      output Cluster {
        output bit0_RNDM {
          output AllPart {
          }
          output EBA {
          }
          output EBC {
          }
          output LBA {
          }
          output LBC {
          }
        }
      }
      output Tower {
        output bit0_RNDM {
          output AllPart {
          }
          output EBA {
          }
          output EBC {
          }
          output LBA {
          }
          output LBC {
          }
        }
      }
      output ROD {
        output AnyPhysTrig {
          output Summary {
          }
        }
        output bit2_L1CAL {
          output Summary {
          }
        }
        output bit6_CTP {
          output Summary {
          }
        }
      }
    }

    output Cell {
      output AnyPhysTrig {
        output AllPart {
        }
        output EBA {
        }
        output EBC {
        }
        output LBA {
        }
        output LBC {
        }
        output CaloMon {
        }
      }
    }
    output Cluster {
      output AnyPhysTrig {
        output AllPart {
        }
        output EBA {
        }
        output EBC {
        }
        output LBA {
        }
        output LBC {
        }
      }
    }
    output MuId {
      output AnyPhysTrig {
      }
    }
    output L2Muon {
      output AnyPhysTrig {
      }
    }
    output MuonFit {
      output AnyPhysTrig {
      }
    }
    output Tower {
      output AnyPhysTrig {
        output AllPart {
        }
        output EBA {
        }
        output EBC {
        }
        output LBA {
        }
        output LBC {
        }
      }
    }
    output Data_Corruption {
      output LBA {
      }
      output LBC {
      }
      output EBA {
      }
      output EBC {
      }
      output Per_lumiblock {
        output LBA {
        }
        output LBC {
        }
        output EBA {
        }
        output EBC {
        }
      }
    }
    output Noise {
      output Digit {
      }
    }
  }
}

#######################
# Histogram Assessments
#######################

dir Tile {
  algorithm = Tile_GatherData
  reference = CentrallyManagedReferences
  dir Cell {
    output = TileCal/Cell
    hist TileBadCell {
    }
    hist TileCellStatusOnFly_.* {
      regex = 1
      display = SetGridx,SetGridy,SetGridStyle(1)
    }
    hist TileMaskChannelOnFlyLB_.* {
      regex = 1
    }
    hist TileCellStatusInDB_.* {
      regex = 1
      display = SetGridx,SetGridy,SetGridStyle(1)
    }

    dir AnyPhysTrig {
      output = TileCal/Cell/AnyPhysTrig
      hist TileCellSynch_AnyPhysTrig {
        algorithm = TileSynch_CheckMeanX
      }
      hist all_in_dir {
      }
      dir AllPart {
        output = TileCal/Cell/AnyPhysTrig/AllPart
        hist TileCellEneDiff_SampA_AllPart_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_AllPart_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_AllPart_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_AllPart_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_AllPart_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_AllPart_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTimeDiff_SampA_AllPart_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_AllPart_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_AllPart_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist all_in_dir {
        }
      }
      dir EBA {
        output = TileCal/Cell/AnyPhysTrig/EBA
        hist TileCellEneDiff_SampA_EBA_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_EBA_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_EBA_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_EBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_EBA_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_EBA_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBA_HG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBA_LG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_EBA_AnyPhysTrig {
        #        }
        hist all_in_dir {
        }
      }
      dir EBC {
        output = TileCal/Cell/AnyPhysTrig/EBC
        hist TileCellEneDiff_SampA_EBC_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_EBC_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_EBC_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_EBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_EBC_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_EBC_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBC_HG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBC_LG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_EBC_AnyPhysTrig {
        #        }
        hist all_in_dir {
        }
      }
      dir LBA {
        output = TileCal/Cell/AnyPhysTrig/LBA
        hist TileCellEneDiff_SampA_LBA_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_LBA_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_LBA_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_LBA_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_LBA_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_LBA_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBA_HG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBA_LG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_LBA_AnyPhysTrig {
        #        }
        hist all_in_dir {
        }
      }
      dir LBC {
        output = TileCal/Cell/AnyPhysTrig/LBC
        hist TileCellEneDiff_SampA_LBC_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_LBC_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_LBC_AnyPhysTrig {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_LBC_AnyPhysTrig {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_LBC_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_LBC_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBC_HG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBC_LG_AnyPhysTrig {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_LBC_AnyPhysTrig {
        #        }
        hist all_in_dir {
        }
      }
    }
    dir bit0_RNDM {
      output = TileCal/Expert/Cell/bit0_RNDM
      hist TileCellSynch_bit0_RNDM {
        algorithm = TileSynch_CheckMeanX
      }
      hist all_in_dir {
      }
      dir AllPart {
        output = TileCal/Expert/Cell/bit0_RNDM/AllPart
        hist TileCellEneDiff_SampA_AllPart_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_AllPart_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_AllPart_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_AllPart_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_AllPart_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_AllPart_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTimeDiff_SampA_AllPart_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_AllPart_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_AllPart_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist all_in_dir {
        }
      }
      dir EBA {
        output = TileCal/Expert/Cell/bit0_RNDM/EBA
        hist TileCellEneDiff_SampA_AllPart_EBA_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_EBA_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_EBA_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_EBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_EBA_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_EBA_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBA_HG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBA_LG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_EBA_bit0_RNDM {
        #        }
        hist all_in_dir {
        }
      }
      dir EBC {
        output = TileCal/Expert/Cell/bit0_RNDM/EBC
        hist TileCellEneDiff_SampA_EBC_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_EBC_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_EBC_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_EBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_EBC_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_EBC_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBC_HG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_EBC_LG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_EBC_bit0_RNDM {
        #        }
        hist all_in_dir {
        }
      }
      dir LBA {
        output = TileCal/Expert/Cell/bit0_RNDM/LBA
        hist TileCellEneDiff_SampA_LBA_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_LBA_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_LBA_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_LBA_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_LBA_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_LBA_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBA_HG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBA_LG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_LBA_bit0_RNDM {
        #        }
        hist all_in_dir {
        }
      }
      dir LBC {
        output = TileCal/Expert/Cell/bit0_RNDM/LBC
        hist TileCellEneDiff_SampA_LBC_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampB_LBC_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneDiff_SampD_LBC_bit0_RNDM {
          algorithm = TileCheckRMSCellEneDiff
        }
        hist TileCellEneRat_SampA_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampB_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellEneRat_SampD_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellEneRat
        }
        hist TileCellTime_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTime
        }
        hist TileCellTimeDiff_SampA_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampB_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellTimeDiff_SampD_LBC_bit0_RNDM {
          algorithm = TileCheckMeanCellTimeDiff
        }
        hist TileCellDetailOccMap_LBC_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThr_LBC_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBC_HG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        hist TileCellDetailOccMapOvThrGain_LBC_LG_bit0_RNDM {
          display = TCanvas(1100,980),SetGridx,SetGridy,SetGridStyle(2)
        }
        #        hist TileCellDigTim_LBC_bit0_RNDM {
        #        }
        hist all_in_dir {
        }
      }
    }



  }
  dir Cluster {
    dir AnyPhysTrig {
      output = TileCal/Cluster/AnyPhysTrig
      hist TileClusterEtaPhiDiff_AnyPhysTrig {
        output = TileCal/Cluster/AnyPhysTrig
        algorithm = TileCluster_CheckMeanX
      }
      hist all_in_dir {
      }
      dir AllPart {
        output = TileCal/Cluster/AnyPhysTrig/AllPart
        hist all_in_dir {
        }
      }
      dir EBA {
        output = TileCal/Cluster/AnyPhysTrig/EBA
        hist all_in_dir {
        }
      }
      dir EBC {
        output = TileCal/Cluster/AnyPhysTrig/EBC
        hist all_in_dir {
        }
      }
      dir LBA {
        output = TileCal/Cluster/AnyPhysTrig/LBA
        hist all_in_dir {
        }
      }
      dir LBC {
        output = TileCal/Cluster/AnyPhysTrig/LBC
        hist all_in_dir {
        }
      }
    }
    dir bit0_RNDM {
      output = TileCal/Expert/Cluster/bit0_RNDM
      hist TileClusterEtaPhiDiff_bit0_RNDM {
        output = TileCal/Expert/Cluster/bit0_RNDM
        algorithm = TileCluster_CheckMeanX
      }
      hist all_in_dir {
      }
      dir AllPart {
        output = TileCal/Expert/Cluster/bit0_RNDM/AllPart
        hist all_in_dir {
        }
      }
      dir EBA {
        output = TileCal/Expert/Cluster/bit0_RNDM/EBA
        hist all_in_dir {
        }
      }
      dir EBC {
        output = TileCal/Expert/Cluster/bit0_RNDM/EBC
        hist all_in_dir {
        }
      }
      dir LBA {
        output = TileCal/Expert/Cluster/bit0_RNDM/LBA
        hist all_in_dir {
        }
      }
      dir LBC {
        output = TileCal/Expert/Cluster/bit0_RNDM/LBC
        hist all_in_dir {
        }
      }
    }

  }
  dir MuId {
    dir AnyPhysTrig {
      output = TileCal/MuId/AnyPhysTrig
      hist all_in_dir {
      }
    }
  }
  dir L2Muon {
    dir AnyPhysTrig {
      output = TileCal/L2Muon/AnyPhysTrig
      hist TileL2DeltaEnergy_AnyPhysTrig {
        algorithm = TileCheckMeanL2DeltaEnergy
        display = LogY
      }
      hist all_in_dir {
      }
    }
  }
  dir MuonFit {
    output = TileCal/MuonFit
    hist TileMuonTimePartLVL1_EBA {
      display = TCanvas(1100,980)
    }
    hist TileMuonTimePartLVL1_LBA {
      display = TCanvas(1100,980)
    }
    hist TileMuonTimePartLVL1_LBC {
      display = TCanvas(1100,980)
    }
    hist TileMuonTimePartLVL1_EBC {
      display = TCanvas(1100,980)
    }
    dir AnyPhysTrig {
      output = TileCal/MuonFit/AnyPhysTrig
      hist TileMuonEnergyDensity_AnyPhysTrig {
        algorithm = TilelandauMuonEnergyDensity
      }
      hist TileMuonFitDir_AnyPhysTrig {
        algorithm = TileCheckMeanMuonFitDir
      }
      hist TileMuonFitDir2_AnyPhysTrig {
        algorithm = TileCheckMeanMuonFitDir2
      }
      hist TileMuonTime_AnyPhysTrig {
        algorithm = TileCheckMeanMuonTime
      }
      hist TileMuonEnergy_AnyPhysTrig {
      }
      hist TileMuonFit_AnyPhysTrig {
      }
      hist TileMuonFitPos_AnyPhysTrig {
      }
      hist TileMuonFitDirPos_AnyPhysTrig {
      }
      hist TileMuonNCells_AnyPhysTrig {
      }
      hist TileMuonPath_AnyPhysTrig {
      }
      hist TileMuonTimePart_AnyPhysTrig {
      }
      hist TileMuonTimePos_AnyPhysTrig {
      }

      hist all_in_dir {
      }
    }
  }
  dir Tower {
    dir AnyPhysTrig {
      output = TileCal/Tower/AnyPhysTrig
      hist all_in_dir {
      }
      dir AllPart {
        output = TileCal/Tower/AnyPhysTrig/AllPart
        hist all_in_dir {
        }
      }
      dir EBA {
        output = TileCal/Tower/AnyPhysTrig/EBA
        hist all_in_dir {
        }
      }
      dir EBC {
        output = TileCal/Tower/AnyPhysTrig/EBC
        hist all_in_dir {
        }
      }
      dir LBA {
        output = TileCal/Tower/AnyPhysTrig/LBA
        hist all_in_dir {
        }
      }
      dir LBC {
        output = TileCal/Tower/AnyPhysTrig/LBC
        hist all_in_dir {
        }
      }
    }
    dir bit0_RNDM {
      output = TileCal/Expert/Tower/bit0_RNDM
      hist all_in_dir {
      }
      dir AllPart {
        output = TileCal/Expert/Tower/bit0_RNDM/AllPart
        hist all_in_dir {
        }
      }
      dir EBA {
        output = TileCal/Expert/Tower/bit0_RNDM/EBA
        hist all_in_dir {
        }
      }
      dir EBC {
        output = TileCal/Expert/Tower/bit0_RNDM/EBC
        hist all_in_dir {
        }
      }
      dir LBA {
        output = TileCal/Expert/Tower/bit0_RNDM/LBA
        hist all_in_dir {
        }
      }
      dir LBC {
        output = TileCal/Expert/Tower/bit0_RNDM/LBC
        hist all_in_dir {
        }
      }
    }


  }
  dir ROD {
    dir AnyPhysTrig {
      output = TileCal/Expert/ROD/AnyPhysTrig
      hist TileRodFragmentSize_AnyPhysTrig {
      }
      hist TileRodFragmentSizeLB_AnyPhysTrig {
      }
      dir Summary {
        output = TileCal/Expert/ROD/AnyPhysTrig/Summary
        hist TileAvgDspRefEn_LBA_AnyPhysTrig {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_LBC_AnyPhysTrig {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_EBA_AnyPhysTrig {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_EBC_AnyPhysTrig {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefTim_LBA_AnyPhysTrig {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_LBC_AnyPhysTrig {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_EBA_AnyPhysTrig {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_EBC_AnyPhysTrig {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileDspRefEn_Summary_AnyPhysTrig {
          #  algorithm = TileROD_compare_DspRefEnMeanY
        }
        hist TileDspRefTim_Summary_AnyPhysTrig {
          #  algorithm = TileROD_compare_DspRefTimMeanY
        }
        hist TileDspRefEnSummary_LBA_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefEnSummary_LBC_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefEnSummary_EBA_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefEnSummary_EBC_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefTimSummary_LBA_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefTimSummary_LBC_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefTimSummary_EBA_AnyPhysTrig {
          display = LogY
        }
        hist TileDspRefTimSummary_EBC_AnyPhysTrig {
          display = LogY
        }
        hist all_in_dir {
        }
      }
    }
    dir bit2_L1CAL {
      output = TileCal/Expert/ROD/bit2_L1CAL
      hist TileRodFragmentSize_bit2_L1CAL {
      }
      hist TileRodFragmentSizeLB_bit2_L1CAL {
      }
      dir Summary {
        output = TileCal/Expert/ROD/bit2_L1CAL/Summary
        hist TileAvgDspRefEn_LBA_bit2_L1CAL {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_LBC_bit2_L1CAL {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_EBA_bit2_L1CAL {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_EBC_bit2_L1CAL {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefTim_LBA_bit2_L1CAL {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_LBC_bit2_L1CAL {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_EBA_bit2_L1CAL {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_EBC_bit2_L1CAL {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileDspRefEn_Summary_bit2_L1CAL {
          #  algorithm = TileROD_compare_DspRefEnMeanY
        }
        hist TileDspRefTim_Summary_bit2_L1CAL {
          #  algorithm = TileROD_compare_DspRefTimMeanY
        }
        hist TileDspRefEnSummary_LBA_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefEnSummary_LBC_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefEnSummary_EBA_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefEnSummary_EBC_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefTimSummary_LBA_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefTimSummary_LBC_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefTimSummary_EBA_bit2_L1CAL {
          display = LogY
        }
        hist TileDspRefTimSummary_EBC_bit2_L1CAL {
          display = LogY
        }

        hist all_in_dir {
        }
      }
    }
    dir bit6_CTP {
      output = TileCal/Expert/ROD/bit6_CTP
      hist TileRodFragmentSize_bit6_CTP {
      }
      hist TileRodFragmentSizeLB_bit6_CTP {
      }
      dir Summary {
        output = TileCal/Expert/ROD/bit6_CTP/Summary
        hist TileAvgDspRefEn_LBA_bit6_CTP {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_LBC_bit6_CTP {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_EBA_bit6_CTP {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefEn_EBC_bit6_CTP {
          algorithm = TileROD_check_DspRefEnMeanY
        }
        hist TileAvgDspRefTim_LBA_bit6_CTP {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_LBC_bit6_CTP {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_EBA_bit6_CTP {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileAvgDspRefTim_EBC_bit6_CTP {
          algorithm = TileROD_check_DspRefTimMeanY
        }
        hist TileDspRefEn_Summary_bit6_CTP {
          #  algorithm = TileROD_compare_DspRefEnMeanY
        }
        hist TileDspRefTim_Summary_bit6_CTP {
          #  algorithm = TileROD_compare_DspRefTimMeanY
        }
        hist TileDspRefEnSummary_LBA_bit6_CTP {
          display = LogY
        }
        hist TileDspRefEnSummary_LBC_bit6_CTP {
          display = LogY
        }
        hist TileDspRefEnSummary_EBA_bit6_CTP {
          display = LogY
        }
        hist TileDspRefEnSummary_EBC_bit6_CTP {
          display = LogY
        }
        hist TileDspRefTimSummary_LBA_bit6_CTP {
          display = LogY
        }
        hist TileDspRefTimSummary_LBC_bit6_CTP {
          display = LogY
        }
        hist TileDspRefTimSummary_EBA_bit6_CTP {
          display = LogY
        }
        hist TileDspRefTimSummary_EBC_bit6_CTP {
          display = LogY
        }

        hist all_in_dir {
        }
      }
    }
  }
  dir DMUErrors {
    algorithm = Tile_GatherData
    hist TileGlobalCRC_errors_bottom {
      algorithm = Tile_GatherData
      output = TileCal/Data_Corruption
    }
    hist TileGlobalCRC_errors_top {
      algorithm = Tile_GatherData
      output = TileCal/Data_Corruption
    }

    hist TileDigiErrorsLBA\d{2} {
      regex = 1
      algorithm = DMU_alg/LB
      output = TileCal/Data_Corruption/LBA
      display = TCanvas(850,490),Draw=TEXTCOLZ
    }

    hist TileDigiErrorsLBC\d{2} {
      regex = 1
      algorithm = DMU_alg/LB
      output = TileCal/Data_Corruption/LBC
      display = TCanvas(850,490),Draw=TEXTCOLZ
    }


    hist (?!.*15|.*40)TileDigiErrorsEBA\d{2} {
      regex = 1
      algorithm = DMU_alg/EB
      output = TileCal/Data_Corruption/EBA
      display = TCanvas(850,490),Draw=TEXTCOLZ,TDota(8,0,10,1),TDota(8,1,10,2),TDota(8,2,10,3),TDota(8,3,10,4),TDota(8,4,10,5),TDota(8,5,10,6),TDota(8,6,10,7),TDota(8,7,10,8),TDota(8,8,10,9),TDota(8,9,10,10),TDota(8,10,10,11),TDota(8,11,10,12),TDota(8,12,10,13),TDota(8,13,10,14),TDota(8,14,10,15),TDota(8,15,10,16),TDota(8,16,10,17),TDota(8,17,10,18),TDota(8,18,10,19),TDota(8,19,10,20),TDota(8,20,10,21),TDota(8,21,10,22),TDota(8,22,10,23),TDota(8,23,10,24),TDota(8,24,10,25),TDota(8,25,10,26),TDota(8,26,10,27),TDota(8,27,10,28),TDota(8,28,10,29),TDota(8,29,10,30),TDota(14,0,16,1),TDota(14,1,16,2),TDota(14,2,16,3),TDota(14,3,16,4),TDota(14,4,16,5),TDota(14,5,16,6),TDota(14,6,16,7),TDota(14,7,16,8),TDota(14,8,16,9),TDota(14,9,16,10),TDota(14,10,16,11),TDota(14,11,16,12),TDota(14,12,16,13),TDota(14,13,16,14),TDota(14,14,16,15),TDota(14,15,16,16),TDota(14,16,16,17),TDota(14,17,16,18),TDota(14,18,16,19),TDota(14,19,16,20),TDota(14,20,16,21),TDota(14,21,16,22),TDota(14,22,16,23),TDota(14,23,16,24),TDota(14,24,16,25),TDota(14,25,16,26),TDota(14,26,16,27),TDota(14,27,16,28),TDota(14,28,16,29),TDota(14,29,16,30)
    }

    hist TileDigiErrorsEBA15 {
      algorithm = DMU_alg/EB_special
      output = TileCal/Data_Corruption/EBA
      display = TCanvas(850,490),Draw=TEXTCOLZ,TDota(0,0,1,1),TDota(0,1,1,2),TDota(0,2,1,3),TDota(0,3,1,4),TDota(0,4,1,5),TDota(0,5,1,6),TDota(0,6,1,7),TDota(0,7,1,8),TDota(0,8,1,9),TDota(0,9,1,10),TDota(0,10,1,11),TDota(0,11,1,12),TDota(0,12,1,13),TDota(0,13,1,14),TDota(0,14,1,15),TDota(0,15,1,16),TDota(0,16,1,17),TDota(0,17,1,18),TDota(0,18,1,19),TDota(0,19,1,20),TDota(0,20,1,21),TDota(0,21,1,22),TDota(0,22,1,23),TDota(0,23,1,24),TDota(0,24,1,25),TDota(0,25,1,26),TDota(0,26,1,27),TDota(0,27,1,28),TDota(0,28,1,29),TDota(0,29,1,30),TDota(8,0,10,1),TDota(8,1,10,2),TDota(8,2,10,3),TDota(8,3,10,4),TDota(8,4,10,5),TDota(8,5,10,6),TDota(8,6,10,7),TDota(8,7,10,8),TDota(8,8,10,9),TDota(8,9,10,10),TDota(8,10,10,11),TDota(8,11,10,12),TDota(8,12,10,13),TDota(8,13,10,14),TDota(8,14,10,15),TDota(8,15,10,16),TDota(8,16,10,17),TDota(8,17,10,18),TDota(8,18,10,19),TDota(8,19,10,20),TDota(8,20,10,21),TDota(8,21,10,22),TDota(8,22,10,23),TDota(8,23,10,24),TDota(8,24,10,25),TDota(8,25,10,26),TDota(8,26,10,27),TDota(8,27,10,28),TDota(8,28,10,29),TDota(8,29,10,30),TDota(14,0,16,1),TDota(14,1,16,2),TDota(14,2,16,3),TDota(14,3,16,4),TDota(14,4,16,5),TDota(14,5,16,6),TDota(14,6,16,7),TDota(14,7,16,8),TDota(14,8,16,9),TDota(14,9,16,10),TDota(14,10,16,11),TDota(14,11,16,12),TDota(14,12,16,13),TDota(14,13,16,14),TDota(14,14,16,15),TDota(14,15,16,16),TDota(14,16,16,17),TDota(14,17,16,18),TDota(14,18,16,19),TDota(14,19,16,20),TDota(14,20,16,21),TDota(14,21,16,22),TDota(14,22,16,23),TDota(14,23,16,24),TDota(14,24,16,25),TDota(14,25,16,26),TDota(14,26,16,27),TDota(14,27,16,28),TDota(14,28,16,29),TDota(14,29,16,30)
    }

    hist TileDigiErrorsEBA40 {
      algorithm = DMU_alg/EBA40
      output = TileCal/Data_Corruption/EBA
      display = TCanvas(850,490),Draw=TEXTCOLZ,TDota(8,0,10,1),TDota(8,1,10,2),TDota(8,2,10,3),TDota(8,3,10,4),TDota(8,4,10,5),TDota(8,5,10,6),TDota(8,6,10,7),TDota(8,7,10,8),TDota(8,8,10,9),TDota(8,9,10,10),TDota(8,10,10,11),TDota(8,11,10,12),TDota(8,12,10,13),TDota(8,13,10,14),TDota(8,14,10,15),TDota(8,15,10,16),TDota(8,16,10,17),TDota(8,17,10,18),TDota(8,18,10,19),TDota(8,19,10,20),TDota(8,20,10,21),TDota(8,21,10,22),TDota(8,22,10,23),TDota(8,23,10,24),TDota(8,24,10,25),TDota(8,25,10,26),TDota(8,26,10,27),TDota(8,27,10,28),TDota(8,28,10,29),TDota(8,29,10,30),TDota(14,0,16,1),TDota(14,1,16,2),TDota(14,2,16,3),TDota(14,3,16,4),TDota(14,4,16,5),TDota(14,5,16,6),TDota(14,6,16,7),TDota(14,7,16,8),TDota(14,8,16,9),TDota(14,9,16,10),TDota(14,10,16,11),TDota(14,11,16,12),TDota(14,12,16,13),TDota(14,13,16,14),TDota(14,14,16,15),TDota(14,15,16,16),TDota(14,16,16,17),TDota(14,17,16,18),TDota(14,18,16,19),TDota(14,19,16,20),TDota(14,20,16,21),TDota(14,21,16,22),TDota(14,22,16,23),TDota(14,23,16,24),TDota(14,24,16,25),TDota(14,25,16,26),TDota(14,26,16,27),TDota(14,27,16,28),TDota(14,28,16,29),TDota(14,29,16,30)
    }

    hist (?!.*18$)TileDigiErrorsEBC\d{2} {
      regex = 1
      algorithm = DMU_alg/EB
      output = TileCal/Data_Corruption/EBC
      display = TCanvas(850,490),Draw=TEXTCOLZ,TDota(8,0,10,1),TDota(8,1,10,2),TDota(8,2,10,3),TDota(8,3,10,4),TDota(8,4,10,5),TDota(8,5,10,6),TDota(8,6,10,7),TDota(8,7,10,8),TDota(8,8,10,9),TDota(8,9,10,10),TDota(8,10,10,11),TDota(8,11,10,12),TDota(8,12,10,13),TDota(8,13,10,14),TDota(8,14,10,15),TDota(8,15,10,16),TDota(8,16,10,17),TDota(8,17,10,18),TDota(8,18,10,19),TDota(8,19,10,20),TDota(8,20,10,21),TDota(8,21,10,22),TDota(8,22,10,23),TDota(8,23,10,24),TDota(8,24,10,25),TDota(8,25,10,26),TDota(8,26,10,27),TDota(8,27,10,28),TDota(8,28,10,29),TDota(8,29,10,30),TDota(14,0,16,1),TDota(14,1,16,2),TDota(14,2,16,3),TDota(14,3,16,4),TDota(14,4,16,5),TDota(14,5,16,6),TDota(14,6,16,7),TDota(14,7,16,8),TDota(14,8,16,9),TDota(14,9,16,10),TDota(14,10,16,11),TDota(14,11,16,12),TDota(14,12,16,13),TDota(14,13,16,14),TDota(14,14,16,15),TDota(14,15,16,16),TDota(14,16,16,17),TDota(14,17,16,18),TDota(14,18,16,19),TDota(14,19,16,20),TDota(14,20,16,21),TDota(14,21,16,22),TDota(14,22,16,23),TDota(14,23,16,24),TDota(14,24,16,25),TDota(14,25,16,26),TDota(14,26,16,27),TDota(14,27,16,28),TDota(14,28,16,29),TDota(14,29,16,30)
    }


    hist TileDigiErrorsEBC18 {
      algorithm = DMU_alg/EB_special
      output = TileCal/Data_Corruption/EBC
      display = TCanvas(850,490),Draw=TEXTCOLZ,TDota(0,0,1,1),TDota(0,1,1,2),TDota(0,2,1,3),TDota(0,3,1,4),TDota(0,4,1,5),TDota(0,5,1,6),TDota(0,6,1,7),TDota(0,7,1,8),TDota(0,8,1,9),TDota(0,9,1,10),TDota(0,10,1,11),TDota(0,11,1,12),TDota(0,12,1,13),TDota(0,13,1,14),TDota(0,14,1,15),TDota(0,15,1,16),TDota(0,16,1,17),TDota(0,17,1,18),TDota(0,18,1,19),TDota(0,19,1,20),TDota(0,20,1,21),TDota(0,21,1,22),TDota(0,22,1,23),TDota(0,23,1,24),TDota(0,24,1,25),TDota(0,25,1,26),TDota(0,26,1,27),TDota(0,27,1,28),TDota(0,28,1,29),TDota(0,29,1,30),TDota(8,0,10,1),TDota(8,1,10,2),TDota(8,2,10,3),TDota(8,3,10,4),TDota(8,4,10,5),TDota(8,5,10,6),TDota(8,6,10,7),TDota(8,7,10,8),TDota(8,8,10,9),TDota(8,9,10,10),TDota(8,10,10,11),TDota(8,11,10,12),TDota(8,12,10,13),TDota(8,13,10,14),TDota(8,14,10,15),TDota(8,15,10,16),TDota(8,16,10,17),TDota(8,17,10,18),TDota(8,18,10,19),TDota(8,19,10,20),TDota(8,20,10,21),TDota(8,21,10,22),TDota(8,22,10,23),TDota(8,23,10,24),TDota(8,24,10,25),TDota(8,25,10,26),TDota(8,26,10,27),TDota(8,27,10,28),TDota(8,28,10,29),TDota(8,29,10,30),TDota(14,0,16,1),TDota(14,1,16,2),TDota(14,2,16,3),TDota(14,3,16,4),TDota(14,4,16,5),TDota(14,5,16,6),TDota(14,6,16,7),TDota(14,7,16,8),TDota(14,8,16,9),TDota(14,9,16,10),TDota(14,10,16,11),TDota(14,11,16,12),TDota(14,12,16,13),TDota(14,13,16,14),TDota(14,14,16,15),TDota(14,15,16,16),TDota(14,16,16,17),TDota(14,17,16,18),TDota(14,18,16,19),TDota(14,19,16,20),TDota(14,20,16,21),TDota(14,21,16,22),TDota(14,22,16,23),TDota(14,23,16,24),TDota(14,24,16,25),TDota(14,25,16,26),TDota(14,26,16,27),TDota(14,27,16,28),TDota(14,28,16,29),TDota(14,29,16,30)
    }


    hist FracTileDigiErrorsLBA\d{2} {
      regex = 1
      output = TileCal/Data_Corruption/Per_lumiblock/LBA
      algorithm = Tile_FracTileDigiErrors_PrintNonZeroBins
    }

    hist FracTileDigiErrorsLBC\d{2} {
      regex = 1
      output = TileCal/Data_Corruption/Per_lumiblock/LBC
      algorithm = Tile_FracTileDigiErrors_PrintNonZeroBins
    }

    hist FracTileDigiErrorsEBA\d{2} {
      regex = 1
      output = TileCal/Data_Corruption/Per_lumiblock/EBA
      algorithm = Tile_FracTileDigiErrors_PrintNonZeroBins
    }

    hist FracTileDigiErrorsEBC\d{2} {
      regex = 1
      output = TileCal/Data_Corruption/Per_lumiblock/EBC
      algorithm = Tile_FracTileDigiErrors_PrintNonZeroBins
    }

    dir BadDrawers {
      output = TileCal/Data_Corruption
      hist TileBadChannelsNegNotMaskMap_EBA {
      }
      hist TileBadChannelsNegNotMaskMap_EBC {
      }
      hist TileBadChannelsNegNotMaskMap_LBA {
      }
      hist TileBadChannelsNegNotMaskMap_LBC {
      }
      hist TileBadChannelsJumpNotMaskMap_EBA {
      }
      hist TileBadChannelsJumpNotMaskMap_EBC {
      }
      hist TileBadChannelsJumpNotMaskMap_LBA {
      }
      hist TileBadChannelsJumpNotMaskMap_LBC {
      }
      hist TileConsecutiveBad {
      }
      hist TileConsecutiveBadLB {
      }
      hist TileEventsWithErrEventinfo {
      }
    }

  } # end DMUErrors

  dir DigiNoise {
    output = TileCal/Noise/Digit
    hist noisemap_.*_hi_.* {
      regex = 1
    }
  }

} # end Tile

# TileCal cells from CaloMonitoring package
dir CaloMonitoring {
  algorithm = TileCaloMon_GatherData
  reference = CentrallyManagedReferences

  dir TileCellMon_NoTrigSel {

    dir General {

      hist CellsXN {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXE {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseTile {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox,gaus(-6.,6.),LogY
      }

      hist CellsXEta {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXPhi {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXEtaVSPhi {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXModuleS1 {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXModuleS2 {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXModuleS3 {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXModuleS4 {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsXTower {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseXEta {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseXPhi {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsRMSXEta {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsRMSXPhi {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseXEtaVSPhi {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseXEtaVSPhiAcells {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseXEtaVSPhiBCcells {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsNoiseXEtaVSPhiDcells {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsRMSXEta_divNoiseDB {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }

      hist CellsRMSXPhi_divNoiseDB {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = StatBox
      }
      hist CellsXNoiseXHash {
        output = TileCal/Cell/AnyPhysTrig/CaloMon
        display = LogY
      }

    } # end General
  } # end TileCellMon_NoTrigSel
} # end CaloMonitoring package


#############
# Algorithms
#############

algorithm Tile_GatherData {
  libname = libdqm_algorithms.so
  name = GatherData
  reference = CentrallyManagedReferences
}

algorithm TileCaloMon_GatherData {
  libname = libdqm_algorithms.so
  name = GatherData
  reference = CentrallyManagedReferences
}

algorithm TileSynch_CheckMeanX {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileSynch_thMeanX
}

algorithm TileCluster_CheckMeanX {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCluster_thMeanX
}

algorithm TileCheckRMSCellEneDiff {
  libname = libdqm_algorithms.so
  name = CheckHisto_RMS
  thresholds = TileCheckRMSCellEneDiffThr
}

algorithm TileCheckMeanCellEneRat {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanCellEneRatThr
}

algorithm TileCheckMeanCellTime {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanCellTimeThr
}

algorithm TileCheckMeanCellTimeDiff {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanCellTimeDiffThr
}

algorithm TilelandauMuonEnergyDensity {
  libname = libdqm_algorithms.so
  name = Simple_landau_Fit
  SubtractFromMean = 0
  thresholds = TilelandauMuonEnergyDensityThr
}


algorithm TileCheckMeanMuonFitDir {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanMuonFitDirThr
}

algorithm TileCheckMeanMuonFitDir2 {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanMuonFitDir2Thr
}

algorithm TileCheckMeanMuonTime {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanMuonTimeThr
}

algorithm TileCheckMeanL2DeltaEnergy {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileCheckMeanL2DeltaEnergyThr
}

algorithm TileROD_check_DspRefEnMeanY {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileROD_DspRefEnMeanY
}

algorithm TileROD_compare_DspRefEnMeanY {
  libname = libdqm_algorithms.so
  name = BinContentComp
  NSigma = 1
  reference = CentrallyManagedReferences
  thresholds = TileROD_compare_DspRefEnMeanY_thresholds
}

algorithm TileROD_compare_DspRefTimMeanY {
  libname = libdqm_algorithms.so
  name = BinContentComp
  NSigma = 1
  reference = CentrallyManagedReferences
  thresholds = TileROD_compare_DspRefTimMeanY_thresholds
}

algorithm TileROD_check_DspRefTimMeanY {
  libname = libdqm_algorithms.so
  name = CheckHisto_Mean
  thresholds = TileROD_DspRefTimMeanY
}



algorithm DMU_alg {
  libname = libdqm_algorithms.so
  name = MaskedBinRow
  OkBin = 1
  MaskedBin = 15
  TestRows = 0
  thresholds = DMU_thr
  DoRate = 1
  UseReference = 0
  UseTotalEntries = 0
  EntriesBin = 18
  algorithm LB {
    reference = TileDigiErrorsLB
  }
  algorithm EB {
    reference = TileDigiErrorsEB
  }
  algorithm EB_special {
    reference = TileDigiErrorsEB_special
  }
  algorithm EBA40 {
    thresholds = DMU_thr_EBA40
    reference = TileDigiErrorsEB
  }
}

algorithm Tile_FracTileDigiErrors_PrintNonZeroBins {
  libname = libdqm_algorithms.so
  name = BinPrint
  UseValue = 2
  Value = 0
  UseMaskValue = -2
  MaskValue = 0
}


#############
# Thresholds
#############

thresholds TileSynch_thMeanX {
  limits XMean {
    warning = -40.
    error = -80.
  }
}

thresholds TileCluster_thMeanX {
  limits AbsXMean {
    warning = 0.1
    error = 0.2
  }
}

thresholds TileROD_DspRefEnMeanY {
  limits AbsYMean {
    warning = 0.005
    error = 0.01
  }
}

thresholds TileROD_DspRefTimMeanY {
  limits AbsYMean {
    warning = 1.00
    error = 5.00
  }
}

thresholds TileCheckRMSCellEneDiffThr {
  limits XRMS {
    warning = 400
    error = 600
  }
}

thresholds TileCheckMeanCellEneRatThr {
  limits AbsXMean {
    warning = 0.15
    error = 0.3
  }
}

thresholds TileCheckMeanCellTimeThr {
  limits AbsXMean {
    warning = 25
    error = 50
  }
}

thresholds TileCheckMeanCellTimeDiffThr {
  limits AbsXMean {
    warning = 1.5
    error = 3
  }
}

thresholds TilelandauMuonEnergyDensityThr {
  limits MPV {
    warning = 0.5
    error = 0.2
  }
  limits MPV {
    warning = 3
    error = 5
  }
}

thresholds TileCheckMeanMuonFitDirThr {
  limits XMean {
    warning = 0.8
    error = 0.6
  }
}

thresholds TileCheckMeanMuonFitDir2Thr {
  limits XMean {
    warning = -0.6
    error = -0.2
  }
}

thresholds TileCheckMeanMuonTimeThr {
  limits AbsXMean {
    warning = 25
    error = 50
  }
}

thresholds TileCheckMeanL2DeltaEnergyThr {
  limits AbsXMean {
    warning = 0.015
    error = 0.15
  }
}

thresholds TileROD_compare_DspRefEnMeanY_thresholds {
  limits NBins {
    warning = 3
    error = 10
  }
}

thresholds TileROD_compare_DspRefTimMeanY_thresholds {
  limits NBins {
    warning = 3
    error = 10
  }
}

thresholds DMU_thr {
  limits BinThreshold {
    warning = 0.001
    error = 0.01
  }
}

thresholds DMU_thr_EBA40 {
  limits BinThreshold {
    warning = 0.001
    error = 0.03
  }
}
